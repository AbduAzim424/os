name: vercheck

needs:
  packages:
    - busybox

inputs:
  bin:
    description: |
      Name of the binary to check for version.
      Conventionally provided as ${{vars.bin-name}} from package definition.
    required: true
  version:
    description: |
      Expected version string to match in the binary's version output.
      Defaults to package version. Can be overridden for specific version formats.
    required: false
    default: ${{package.version}}
  version-flag:
    description: |
      Command line flag used to get version information.
      Common values: --version, -version, -V, -v, version
    required: false
    default: "--version"
  match-type:
    description: |
      How to match the version string:
      - 'contains': Check if version string appears anywhere in output (default)
      - 'exact': Require exact match of entire output
      - 'regex': Use version as regex pattern
    required: false
    default: "contains"

# USAGE EXAMPLES:
#
# Minimal usage (uses package.version by default):
#   - uses: vercheck
#     with:
#       bin: ${{vars.bin-name}}
#
# With custom version format:
#   - uses: vercheck
#     with:
#       bin: nginx
#       version: "nginx/${{package.version}}"
#       version-flag: "-v"
#
# EXPECTED VARS:
#   - bin-name: Primary binary name
#
pipeline:
  - runs: |
      vercheck() {
        local binary="$1"
        local expected_version="$2"
        local version_flag="$3"
        local match_type="$4"
        local output exit_code

        echo "   Checking version for binary: $binary"
        echo "   Expected version: $expected_version"
        echo "   Version flag: $version_flag"
        echo "   Match type: $match_type"

        # Check if binary exists in PATH
        if ! command -v "$binary" >/dev/null 2>&1; then
          echo "ERROR: Binary '$binary' not found in PATH"
          echo "   Make sure the package installed correctly and binary is in PATH"
          exit 1
        fi
        echo "Binary '$binary' found in PATH"

        # Get version output (capture both stdout and stderr)
        echo "   Running: $binary $version_flag"
        output=$($binary $version_flag 2>&1)
        exit_code=$?

        if [ $exit_code -ne 0 ]; then
          echo "ERROR: '$binary $version_flag' failed with exit code $exit_code"
          echo "   Command output:"
          echo "$output" | sed 's/^/     /'
          exit 1
        fi

        # Perform version matching based on match-type
        local match_success=false
        case "$match_type" in
          "exact")
            if [ "$output" = "$expected_version" ]; then
              match_success=true
            fi
            ;;
          "regex")
            if echo "$output" | grep -E "$expected_version" >/dev/null; then
              match_success=true
            fi
            ;;
          "contains"|*)
            if echo "$output" | grep -F "$expected_version" >/dev/null; then
              match_success=true
            fi
            ;;
        esac

        if [ "$match_success" = "false" ]; then
          echo "ERROR: Version check failed"
          echo "   Match type: $match_type"
          echo "   Expected: '$expected_version'"
          echo "   Got output:"
          echo "$output" | sed 's/^/     /'
          exit 1
        fi

        echo "Version check passed for '$binary'"
        echo "   Output: $output"
        echo ""
      }

      vercheck "${{inputs.bin}}" "${{inputs.version}}" "${{inputs.version-flag}}" "${{inputs.match-type}}"
